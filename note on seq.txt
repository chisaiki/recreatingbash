/* bool checkifvalid(int a, char *b[])

{
    bool checkifalpha = false;

    for(int i = 0; i < a; i++)
    {
        char argvalue = b[i][0];
        char secondchar = b[i][1];

        if((isalpha(argvalue) == 0 && isalpha(secondchar) != 0) || isalpha(argvalue) != 0)
        {
           fprintf(stderr,"\n'%s' is an invalid argument. Must be numeric integer values.\n", b[i]);
           checkifalpha = true;
        } 
       //its only reading the first letter in char --> do argv[1][1]  :: will read the first char of the first argument   
    }

    return checkifalpha;
} */

**I dont even need to store it in a variable I can directly access the argument's characters by treating it like a 2D array

** I had to change isalpha to isdigit instead, since symbols will pass through the program even though they arent valid integers

**All errors go to the error stream except for usage errors

Next Steps: Add flags

https://people.cs.rutgers.edu/~pxk/416/notes/c-tutorials/getopt.html
https://www.geeksforgeeks.org/getopt-function-in-c-to-parse-command-line-arguments/
https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html